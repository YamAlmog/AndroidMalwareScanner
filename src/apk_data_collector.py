import os
import pandas as pd
from pyaxmlparser import APK
import logging
import hashlib
from zipfile import BadZipFile

class ApkCollector():
    def __init__(self, benign_files_dir:str) -> None:
        self.benign_directory = benign_files_dir
        self.permission_distribution_dict = {}

 
    def calculate_sha256(self, file_path:str) -> str:
        ''' 
            fix hash name for apk file
            input: file path
            output: hash name for this file
        '''
        sha256 = hashlib.sha256()
        # Open the file in binary mode
        with open(file_path, 'rb') as file:
            # Read the file in chunks
            for chunk in iter(lambda: file.read(4096), b''):
                sha256.update(chunk)
        return sha256.hexdigest()


    def get_files_path(self, directory_path:str) -> list:
        '''
            extract file paths
            input: directory path
            output: list of all the files path + name in this dir
        '''
        file_paths = []
        try:
            # browse the directory and its subdirectories
            for root, dirs, files in os.walk(directory_path):
                for file in files:    
                    file_path = os.path.join(root, file)
                    if file_path.endswith(".apk"):
                        # fix the apk file name with sha256
                        sha256_name = self.calculate_sha256(file_path)
                        file_paths.append((file_path, sha256_name))
                    continue
                return file_paths
        except OSError as e:
            raise OSError(f"OSError error occurred while try to get files path: {e}")


    
    def get_apk_permissions(self, apk_path:str) -> list:
        '''
            extract permissions from AndroidManifest.xml
            input: path to a specific apk file
            output: list of this apk permissions
        '''
        try:
            apk = APK(apk_path)
            # get_permissions -> permissions used during runtime & get_declared_permissions -> explicitly declared in the AndroidManifest.xml file
            permissions = apk.get_declared_permissions()+ apk.get_permissions()
            return permissions
        except IOError as e:
            print(f"IOError error occured while run get_apk_permissions function: {e}")
        except BadZipFile:
            print(f"Error: {apk_path} is not a valid ZIP file or is not in the expected format.")
        except Exception as e:
            print(f"Unknown error occured while run get_apk_permissions function: {e}")


    
    def permission_distribution(self, permission_list:list, ):
        ''' 
            updating permission distribution dict 
            input: permission list 
            output: None, just update global dict
        '''
        for permission in permission_list:
            if permission == self.benign_directory:
                continue
            elif permission in self.permission_distribution_dict:
                self.permission_distribution_dict[permission] +=1
            else:
                self.permission_distribution_dict[permission] = 1


    
    def is_directory_in_path(self, path:str) -> bool:
        '''
            check whether the Benign directory is in the path
            input: directory path
            output: true or false
        '''
        normalized_path = os.path.normpath(path)
        # Split the path into individual components
        path_components = normalized_path.split(os.path.sep)
        return self.benign_directory in path_components


    
    def create_permission_dict(self, all_files:list, directory_path:str) -> dict:
        ''' 
            creates apk permissions dictionary
            input: directory path
            output: permission dictionary for apk files
        '''
        try:    
            permission_dict = {}
            file_tuples_list = self.get_files_path(directory_path)
            for file in file_tuples_list:
                all_files.append(file[1])
                permissions = self.get_apk_permissions(file[0])
                if permissions:
                    # Update permission distribution dictionary
                    self.permission_distribution(permissions)
                    if self.is_directory_in_path(directory_path):
                        permissions.append(self.benign_directory)
                    permission_dict[file[1]] = permissions
                else:
                    logging.debug("permission is empty")
                    continue
            return permission_dict
        except OSError as e:
            print(f"OS Error: {e}")
        except Exception as e:
            print(f"Unknown Error: {e}")

    
    def update_labeled_df(self, df:pd.DataFrame, apk_dict:dict, label_column:str):
        ''' 
            create csv file -> rows=apk fils, columns=permissions+label
            input: df to update, apk permission dict, label column name
            output: None
        '''
        for file, permissions in apk_dict.items():   
            if self.benign_directory in permissions:
                df.at[file,label_column] = 1
                permissions.remove(self.benign_directory)
            for permission in permissions:
                if permission in df.columns:
                    df.at[file,permission] = 1
            
