import psycopg2
from errors import CacheException
import os
from typing import Optional
from cache_manager import CacheManager
from models import ClassificationResponse, Metadata
from classifier import Verdict


class SqlCacheManager(CacheManager):
    def __init__(self) -> None:
        self.db_url = os.getenv("DATABASE_URL")

        # if table of apk_files_cache doesn't exist, create it
        create_android_apps_cache_table = """
            CREATE TABLE IF NOT EXISTS apk_files_cache (
            file_hash VARCHAR(255) PRIMARY KEY,
            verdict VARCHAR(255),
            probability double precision,
            permissions text
        );
        """
        with psycopg2.connect(self.db_url) as conn:
            cursor = conn.cursor()
            cursor.execute(create_android_apps_cache_table)

    def get_file_details(self, file_hash: str) -> Optional[ClassificationResponse]:
        try:
            with psycopg2.connect(self.db_url) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT * FROM apk_files_cache WHERE file_hash = %s", (file_hash,)
                )
                existing_item = cursor.fetchone()
                cursor.close()
                if existing_item is None:
                    return None

                file_hash, verdict, probability, permissions = existing_item

                # Create Metadata instance
                metadata = Metadata(file_hash=file_hash, permissions=permissions)

                # Create ClassificationResponse instance
                response = ClassificationResponse(
                    verdict=Verdict(verdict),
                    probability=probability,
                    metadata=metadata,
                    in_cache=True,
                )

                return response
        except Exception as e:
            raise CacheException(f"Error occurred while run get_file_details: {e}")

    def insert_file_details_into_cache(
        self, file_hash: str, model: ClassificationResponse
    ) -> None:
        try:
            verdict = model.verdict
            probability = model.probability
            permissions = model.metadata.permissions
            with psycopg2.connect(self.db_url) as conn:
                cursor = conn.cursor()
                query = query = (
                    "INSERT INTO apk_files_cache (file_hash, verdict, probability, permissions) "
                    f"VALUES ('{file_hash}', '{verdict}', {probability}, '{permissions}');"
                )
                cursor.execute(query)
                conn.commit()
                cursor.close()
        except Exception as e:
            raise CacheException(
                f"Error occurred while run insert_file_details_into_cache: {e}"
            )

    def clear_cache(self):
        try:
            with psycopg2.connect(self.db_url) as conn:
                cursor = conn.cursor()

                # check if cache table is empty
                cursor.execute("SELECT COUNT(*) FROM apk_files_cache;")
                row_count = cursor.fetchone()[0]

                if row_count > 0:
                    cursor.execute("DELETE FROM apk_files_cache;")
                    conn.commit()
        except Exception as e:
            raise CacheException(f"Error occurred while run clear_cache: {e}")
