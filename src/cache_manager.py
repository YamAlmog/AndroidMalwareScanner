from typing import Optional
from models import ClassificationResponse


class CacheManager:
    def get_file_details(self, file_hash: str) -> Optional[ClassificationResponse]:
        raise NotImplementedError("Subclass must implement abstract method")

    def insert_file_details_into_cache(
        self, file_hash: str, model: ClassificationResponse
    ) -> None:
        raise NotImplementedError("Subclass must implement abstract method")

    def clear_cache(self):
        raise NotImplementedError("Subclass must implement abstract method")
