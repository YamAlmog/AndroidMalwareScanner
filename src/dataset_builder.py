import pandas as pd
import logging
from typing import List, Dict, Optional
import glob
from errors import ApkAnalyzerError
from apk_analyzer import ApkAnalyzer
import numpy as np
import os 

# Constants
BENIGN_LABEL = 0
MALICIOUS_LABEL = 1  

            
class DatasetBuilder():
    
    @staticmethod
    def get_most_common_permissions(malicious_dir_file_path) -> Dict[str, int]:

        permission_dist_dict = {} 

        for file_path in glob.iglob(f'{malicious_dir_file_path}/*.apk'):
            file_path = file_path.replace("\\", "/")
            try:
                file_permissions = ApkAnalyzer.get_file_permissions(file_path)

                for permission in file_permissions:
                    if permission in permission_dist_dict:
                        permission_dist_dict[permission] +=1
                    else:
                        permission_dist_dict[permission] = 1

            except ApkAnalyzerError as ex:
                logging.warning(f'Error getting file: {file_path} permissions. details: {ex}. Skipping file...')
             
        sorted_permission_dict = dict(sorted(permission_dist_dict.items(), key=lambda item: item[1], reverse=True))
        return sorted_permission_dict

 
    @staticmethod
    def build_df_rows(apk_analyzer, dir_path, label):
        
        df_rows = []
        for file_path in glob.iglob(f'{dir_path}/*.apk'):
            file_path = file_path.replace("\\", "/")

            file_feature_vector = apk_analyzer.get_feature_vector(file_path)
            file_hash = ApkAnalyzer.get_file_hash(file_path)

            if file_feature_vector:
                df_row = [file_hash] + file_feature_vector + [label]
                df_rows.append(df_row)

        return df_rows

    @staticmethod
    def build_dataset(malicious_files_dir : str, benign_files_dir : str, most_common_permissions_path : str, output_dataframe_path :str, features_count=50):

        # get most common permissions 
        permission_distribution = DatasetBuilder.get_most_common_permissions(malicious_files_dir)
        most_common_permissions = list(permission_distribution.keys())[:features_count]

        # export most common permissions to a csv file
        pd.DataFrame(most_common_permissions).to_csv(most_common_permissions_path, index=False)

        apk_analyzer = ApkAnalyzer(most_common_permissions)

        df_columns = ["hash"]+  most_common_permissions + ["label"]


        benign_rows = DatasetBuilder.build_df_rows(apk_analyzer, benign_files_dir, BENIGN_LABEL)
        malicious_rows = DatasetBuilder.build_df_rows(apk_analyzer, malicious_files_dir, MALICIOUS_LABEL)

        df_rows = benign_rows + malicious_rows
        output_df = pd.DataFrame(df_rows, columns=df_columns)
        output_df.to_csv(output_dataframe_path, index=False)
        print(f"file {output_dataframe_path} has been created")




    #  similar to build_dataset function beside that i'm using the common_permission file of the train dataset to create the test set
    @staticmethod
    def build_test_set(benign_files_dir:str, malicious_files_dir:str, common_permission_file_path:str):
        # build test set without labels and without hash
        df_rows = []
        most_common_permissions = pd.read_csv(common_permission_file_path, header=None)
        permissions_list = most_common_permissions[0].tolist()
        permissions_list = permissions_list[1:]
        # initial ApkAnalyzer with permissions_list
        apk_analyzer = ApkAnalyzer(permissions_list)
       
        df_columns = ["hash"]+  permissions_list + ["label"]

        benign_rows = DatasetBuilder.build_df_rows(apk_analyzer, benign_files_dir, BENIGN_LABEL)
        malicious_rows = DatasetBuilder.build_df_rows(apk_analyzer, malicious_files_dir, MALICIOUS_LABEL)

        df_rows = benign_rows + malicious_rows
            
        output_df = pd.DataFrame(df_rows, columns=df_columns)
        output_df.to_csv("dataframes/test_set.csv", index=False)
        print(f"file test_set has been created")



        

                



        

        



            


        


