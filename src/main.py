from apk_analyzer import ApkAnalyzer
from classifier import Classifier
import argparse
import os
from errors import ApkAnalyzerError
import pandas as pd
import logging
from dotenv import load_dotenv

if os.getenv("DOCKER_ENV"):
    load_dotenv(".docker.env")
else:
    load_dotenv(".env")

logging.basicConfig(
    level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s"
)


CSV_PATH = os.getenv("CSV_PATH_FROM_SRC")
COMMON_PERMISSIONS_PATH = os.getenv("COMMON_PERMISSIONS_PATH_FROM_SRC")


def main():
    try:

        parser = argparse.ArgumentParser(
            description="This program classify apk file as malicious or benign"
        )
        parser.add_argument("--path", type=str, help="The path to the apk file")

        args = parser.parse_args()
        user_file_path = args.path

        if not os.path.isfile(user_file_path):
            raise argparse.ArgumentTypeError(
                "The file does not exist, Or incorrect path."
            )

        most_common_permissions = pd.read_csv(COMMON_PERMISSIONS_PATH, header=None)
        permissions_list = most_common_permissions[0].tolist()
        permissions_list = permissions_list[1:]

        apk_analyzer = ApkAnalyzer(permissions_list)
        with open(user_file_path, "rb") as file:
            contents = file.read()
        file_permissions = apk_analyzer.get_file_permissions(contents)

        file_feature_vector = apk_analyzer.get_feature_vector(contents)

        classifier = Classifier(CSV_PATH)
        if file_feature_vector:

            classification, probability = classifier.predict_file(file_feature_vector)
            print(f"Your file is {classification} in probability of {probability}")

            print(f"\nYour file permissions are: \n {file_permissions}")
        else:
            raise ApkAnalyzerError(
                f"There was an error getting permissions of file {user_file_path}"
            )

    except argparse.ArgumentTypeError as e:
        print(e)
    except ApkAnalyzerError as e:
        print(e)
    except Exception as e:
        raise e


if __name__ == "__main__":
    main()
