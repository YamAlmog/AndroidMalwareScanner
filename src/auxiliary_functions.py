
from models import ClassificationResponse, Metadata, OtherProvidersClassifications
from errors import ApkAnalyzerError
from apk_analyzer import ApkAnalyzer
from classifier import Classifier
import time
import logging
import zipfile
from io import BytesIO
import os
from dotenv import load_dotenv

if os.getenv("DOCKER_ENV"):
    load_dotenv(".docker.env")
else:
    load_dotenv(".env")

CSV_PATH = os.getenv('CSV_PATH_FROM_SRC')

class Auxiliary:
    def __init__(self, apk_analyzer, redis_cache):
        self.apk_analyzer = apk_analyzer
        self.redis_cache = redis_cache

    @staticmethod
    def tracer(func):
        def wrapper(*args):
            logging.debug(f"{func.__name__} function")
            before = time.time()
            result  = func(*args)
            logging.debug(f"====================> Execution time: {time.time() - before} seconds")
            return result
        return wrapper


    def get_file_details(self, file_content):
        file_hash = self.apk_analyzer.get_file_hash(file_content)
        cache_result = self.redis_cache.get_redis_db_file_details(file_hash)  
    
        if cache_result:
            return cache_result   
        else:
            file_feature_vector = self.apk_analyzer.get_feature_vector(file_content)
            file_classifier = Classifier(CSV_PATH)
            classification, probability = file_classifier.predict_file(file_feature_vector)
            permissions = self.apk_analyzer.get_file_permissions(file_content)
            permissions = str(permissions).replace('\'', '')
            # Item doesn't exist, create Classification model and insert it into redis_cache
            file_metadata = Metadata(file_hash = file_hash, permissions = permissions)
            classification_model = ClassificationResponse(verdict = classification, probability = probability, metadata = file_metadata)
            self.redis_cache.insert_file_details_to_redis_db(file_hash, classification_model)
        return classification_model

    @staticmethod
    def is_apk(contents: bytes):
        # Check for ZIP file signature (APK is essentially a ZIP file)
        try:
            with zipfile.ZipFile(BytesIO(contents)) as zip_file:
                # Check if there's an AndroidManifest.xml file in the ZIP archive
                return "AndroidManifest.xml" in zip_file.namelist()
        except zipfile.BadZipFile:
            return False
    