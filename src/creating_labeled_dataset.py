import os
import pandas as pd
from pyaxmlparser import APK
import logging
import hashlib

logging.basicConfig(filename='app.log', filemode='w',  level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

POSITIVE_LABEL_DIR = "Benign"
permission_distribution_dict = {}
all_files = []

''' *************************************************************
functionality: fix hash name for apk file
    input: file path
    output: return list of all the files path + name in this dir
***************************************************************'''
def calculate_sha256(file_path):
    sha256 = hashlib.sha256()
    # Open the file in binary mode
    with open(file_path, 'rb') as file:
        # Read the file in chunks
        for chunk in iter(lambda: file.read(4096), b''):
            sha256.update(chunk)
    return sha256.hexdigest()


''' *************************************************************
functionality: extract file paths
input: directory path
output: list of all the files path + name in this dir
***************************************************************'''
def get_files_path(directory_path:str):
    file_paths = []
    # browse the directory and its subdirectories
    for root, dirs, files in os.walk(directory_path):
        for file in files:    
            file_path = os.path.join(root, file)
            # fix the apk file name with sha256
            sha256_name = calculate_sha256(file_path)
            file_paths.append((file_path, sha256_name))
        return file_paths

''' *************************************************************
functionality: extract permissions from AndroidManifest.xml
input: path to a specific apk file
output: list of this apk permissions
***************************************************************'''
def get_apk_permissions(apk_path:str):
    apk = APK(apk_path)
    # get_permissions -> permissions used during runtime & get_declared_permissions -> explicitly declared in the AndroidManifest.xml file
    permissions = apk.get_declared_permissions()+ apk.get_permissions()
    return permissions


''' *************************************************************
functionality: updating permission distribution dict 
input: permission list 
output: None, just update global dict
***************************************************************'''
def permission_distribution(permission_list:list):
    global permission_distribution_dict
    for permission in permission_list:
        if permission in permission_distribution_dict:
            permission_distribution_dict[permission] +=1
        else:
            permission_distribution_dict[permission] = 1


''' *************************************************************
functionality: check whether the Benign directory is in the path
input: directory path
output: true or false
***************************************************************'''
def is_directory_in_path(path:str):
    normalized_path = os.path.normpath(path)
    # Split the path into individual components
    path_components = normalized_path.split(os.path.sep)
    return POSITIVE_LABEL_DIR in path_components


''' *************************************************************
functionality: creates apk permissions dictionary
input: directory path
output: permission dictionary for apk files
***************************************************************'''
def create_permission_dict(directory_path:str):
    permission_dict = {}
    file_tuples_list = get_files_path(directory_path)
    for file in file_tuples_list:
        all_files.append(file[1])
        permissions = get_apk_permissions(file[0])
        # Update permission distribution dictionary
        permission_distribution(permissions)
        if is_directory_in_path(directory_path):
            permissions.append(POSITIVE_LABEL_DIR)
        permission_dict[file[1]] = permissions
        
    return permission_dict


''' *************************************************************
functionality: create csv file -> rows=apk fils, columns=permissions+label
input: df to update, apk permission dict, label column name
output: None
***************************************************************'''
def update_labeled_df(df:pd.DataFrame, dict:dict, label_column:str):
    for file, permissions in dict.items():
        
        for permission in permissions:
            print(f"---------------------> {permission}")
            print(f"---------------------> {file}")
            df.at[file,permission] = 1
        if POSITIVE_LABEL_DIR in permissions:
            df[file,label_column] = 1


def main():
    global permission_distribution_dict
    global all_files
    feature_num = 20
    dir_path = "C:/Projects/Python/Android/AndroidMalwareScanner/data"
    
    apk_permission_dict = create_permission_dict(dir_path)
    logging.debug(apk_permission_dict)
    permission_dist_dict = dict(sorted(permission_distribution_dict.items(), key=lambda item: item[1], reverse=True))
    logging.debug(permission_dist_dict)
    
    features_list = list(permission_dist_dict.keys())[:feature_num]
    features_list.append("label")
    # create the pd data frame
    android_apps_df = pd.DataFrame(index=all_files, columns=features_list)
    android_apps_df = android_apps_df.fillna(0)
    logging.debug(android_apps_df)
    # put all the permission data into the df
    update_labeled_df(android_apps_df, apk_permission_dict, label_column="label")
    label_column = android_apps_df.pop('label')
    android_apps_df['label'] = label_column
    android_apps_df.to_csv('android_apps_df.csv', index=True)

if __name__ == "__main__":
    main()




