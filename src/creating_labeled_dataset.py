import os
import pandas as pd
from pyaxmlparser import APK
import logging
import hashlib
from zipfile import BadZipFile
from apk_data_collector import ApkCollector
logging.basicConfig(filename='app.log', filemode='w',  level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

POSITIVE_LABEL_DIR = "Benign"
apk_collector = ApkCollector(POSITIVE_LABEL_DIR)

def main():  
    all_files = []
    feature_num = 50
    permission_dict_list = []
    features_list = []

    dirs_list = ["C:/Projects/Python/Android/Android/Benign", "C:/Projects/Python/Android/Android/MalDroid", "C:/Projects/Python/Android/Android/StormDroid_KuafuDet"]
    
    # create permission dictionaries
    for dir_path in dirs_list:
        apk_permission_dict = apk_collector.create_permission_dict(all_files,dir_path)
        print("create apk permission dict")
        if apk_permission_dict:
            permission_dict_list.append(apk_permission_dict)
            logging.debug(apk_permission_dict)
    
    permission_dist_dict = dict(sorted(apk_collector.permission_distribution_dict.items(), key=lambda item: item[1], reverse=True))
    logging.debug(permission_dist_dict)
    # features list is the permossions that ocurred the most in malicious apk files
    features_list = list(permission_dist_dict.keys())[:feature_num]
    features_list.append("label")

    # create the pd data frame
    android_apps_df = pd.DataFrame(index=all_files, columns=features_list)
    android_apps_df = android_apps_df.fillna(0)
    logging.debug(android_apps_df)

    
    # put all the permission data into the df
    for apk_dict in permission_dict_list:
        apk_collector.update_labeled_df(android_apps_df, apk_dict, label_column="label")
    
    label_column = android_apps_df.pop('label')
    android_apps_df['label'] = label_column
    # fill all the Nan values by zeros
    android_apps_df.fillna(0, inplace=True)
    # convert the label to be 1 for malicious files and 0 for benign
    android_apps_df['label'].replace({0: 1, 1: 0}, inplace=True)
    android_apps_df.to_csv('android_apps_df.csv', index=True)
    print("finishing load data to android_apps_df file")


if __name__ == "__main__":
    main()




