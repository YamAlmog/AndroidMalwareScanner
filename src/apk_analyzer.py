from pyaxmlparser import APK
import logging
from zipfile import BadZipFile
from typing import List, Optional
from errors import ApkAnalyzerError
import zipfile
from io import BytesIO


class ApkAnalyzer:
    def __init__(self, most_common_permissions: List[str]) -> None:
        self.most_common_permissions = most_common_permissions

    @staticmethod
    def get_file_permissions(file_content) -> List[str]:
        try:
            apk = APK(file_content, raw=True)
            return apk.get_declared_permissions() + apk.get_permissions()

        except BadZipFile as e:
            raise ApkAnalyzerError(
                f"Error: is not a valid ZIP file or is not in the expected format. {e}"
            )

        except Exception as e:
            raise ApkAnalyzerError(
                f"Unknown error occurred while trying to get file permissions {e}"
            )

    def get_feature_vector(self, file_content) -> Optional[List[int]]:
        # extract permissions
        try:
            file_permissions = ApkAnalyzer.get_file_permissions(file_content)

            # use most_common_permissions to calculate feature vector
            feature_vector = []

            for permission in self.most_common_permissions:
                if permission in file_permissions:
                    feature_vector.append(1)
                else:
                    feature_vector.append(0)

            return feature_vector

        except ApkAnalyzerError as ex:
            logging.error(f"Error getting feature vector for file. details: {ex}")
            return None

    @staticmethod
    def is_apk(contents: bytes):
        # Check for ZIP file signature (APK is essentially a ZIP file)
        try:
            with zipfile.ZipFile(BytesIO(contents)) as zip_file:
                # Check if there's an AndroidManifest.xml file in the ZIP archive
                return "AndroidManifest.xml" in zip_file.namelist()
        except zipfile.BadZipFile:
            return False
