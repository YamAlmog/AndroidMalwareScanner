
from pyaxmlparser import APK
import logging
import hashlib
from zipfile import BadZipFile
from typing import List, Dict, Optional
from errors import ApkAnalyzerError


class ApkAnalyzer(): 
    def __init__(self, most_common_permissions : List[str]):
        self.most_common_permissions = most_common_permissions

    @staticmethod
    def get_file_permissions(file_path) -> List[str]:
        try:
            apk = APK(file_path)
            return apk.get_declared_permissions()+ apk.get_permissions()
        
        except BadZipFile as e:
            raise ApkAnalyzerError(f"Error: {file_path} is not a valid ZIP file or is not in the expected format. {e}")
        
        except Exception as e:
            raise ApkAnalyzerError(f"Unknown error occurred while trying to get file permissions {e}")
    
    
    @staticmethod
    def get_file_hash(file_path:str) -> str:
      
        # Open the file in binary mode
        with open(file_path, 'rb') as file:
            contents = file.read()
        return hashlib.sha256(contents).hexdigest()
    


    def get_feature_vector(self, file_path : str) -> Optional[List[int]]:
        # extract permissions
        try:
            file_permissions = ApkAnalyzer.get_file_permissions(file_path)
    
            # use most_common_permissions to calculate feature vector 
            feature_vector = []

            for permission in self.most_common_permissions:
                if permission in file_permissions:
                    feature_vector.append(1)
                else:
                    feature_vector.append(0)

            return feature_vector
        
        except ApkAnalyzerError as ex:
            logging.error(f'Error getting feature vector for file {file_path} . details: {ex}')
            return None

    