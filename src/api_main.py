import pandas as pd
import requests
import os
from fastapi import FastAPI, File, UploadFile, HTTPException
from errors import ApkAnalyzerError
from apk_analyzer import ApkAnalyzer
from classifier import Classifier

app = FastAPI()
USER_FILE_PATH = 'C:/Projects/Python/Android/AndroidMalwareScanner/user_file'
COMMON_PERMISSIONS_PATH = "../dataframes/most_common_permission.csv"
CSV_PATH = "../dataframes/dataframe.csv"

# initial class objects:
most_common_permissions = pd.read_csv(COMMON_PERMISSIONS_PATH, header=None)
permissions_list = most_common_permissions[0].tolist()
permissions_list = permissions_list[1:]

apk_analyzer = ApkAnalyzer(permissions_list)
file_classifier = Classifier(CSV_PATH)

@app.post("/upload_file/")
async def upload_user_file(file: UploadFile = File(...)):
    try:
        # download this file to constant path
        contents = await file.read()
        with open(USER_FILE_PATH, "wb") as f:
            f.write(contents) 
        file_feature_vector = apk_analyzer.get_feature_vector(USER_FILE_PATH)
        classification, probability = file_classifier.predict_file(file_feature_vector)
        permissions = apk_analyzer.get_file_permissions(USER_FILE_PATH)
        hash = apk_analyzer.get_file_hash(USER_FILE_PATH)
        return {"verdict": classification, "probability": probability, "metadata":{"file_hash":hash, "permissions": permissions}}
    except OSError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except ApkAnalyzerError as e: 
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")

