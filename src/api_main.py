import pandas as pd
import requests
import os
from fastapi import FastAPI, File, UploadFile, HTTPException
from errors import ApkAnalyzerError
from apk_analyzer import ApkAnalyzer
from classifier import Classifier
import psycopg2
from typing import List
from errors import CacheException
from cache import CacheFileCreator
from models import CacheModel, Metadata
from dotenv import load_dotenv
load_dotenv()

app = FastAPI()

USER_FILE_PATH = os.getenv('USER_FILE_PATH')
COMMON_PERMISSIONS_PATH = os.getenv('COMMON_PERMISSIONS_PATH_FROM_SRC')
CSV_PATH = os.getenv('CSV_PATH_FROM_SRC')
VT_API_KEY = os.getenv('VT_API_KEY')

# initial class objects:
most_common_permissions = pd.read_csv(COMMON_PERMISSIONS_PATH, header=None)
permissions_list = most_common_permissions[0].tolist()
permissions_list = permissions_list[1:]

apk_analyzer = ApkAnalyzer(permissions_list)
file_classifier = Classifier(CSV_PATH)

db_params = {
            'host': 'localhost',
            'database': 'Learning',
            'user': 'postgres',
            'password': '123456',
            }

cache_creator = CacheFileCreator(db_params)



@app.post("/scan_file")
async def upload_user_file(file: UploadFile = File(...)):
    try:
        cache_model = CacheModel()
        metadata = Metadata()

        contents = await file.read()
        with open(USER_FILE_PATH, "wb") as f:
            f.write(contents) 
        
        file_hash = apk_analyzer.get_file_hash(USER_FILE_PATH)
        result = cache_creator.get_file_details_from_db(file_hash)
        
        if result:
            # unpack data and return to the user , result from cache db
            file_hash, classification, probability, permissions = result

        else:
            file_feature_vector = apk_analyzer.get_feature_vector(USER_FILE_PATH)
            classification, probability = file_classifier.predict_file(file_feature_vector)
            permissions = apk_analyzer.get_file_permissions(USER_FILE_PATH)
            # Item doesn't exist, insert it into the table
            cache_creator.insert_results_to_db(file_hash, classification, probability, permissions)
        # return response
        metadata.file_hash = file_hash
        metadata.permissions = permissions
        print(metadata.permissions)
        cache_model.metadata = metadata
        cache_model.verdict = classification
        cache_model.probability = probability
        print(cache_model)
        return cache_model

    except CacheException as e:
        raise HTTPException(status_code=404, detail=str(e))    
    except OSError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except ApkAnalyzerError as e: 
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")


@app.post("/get_permissions")
async def upload_user_file(file: UploadFile = File(...)):
    try:
        contents = await file.read()
        with open(USER_FILE_PATH, "wb") as f:
            f.write(contents) 
        permissions = apk_analyzer.get_file_permissions(USER_FILE_PATH)
        return {'File Permissions': permissions}
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")


@app.post("/scan_file_with_hash")
async def upload_user_file(file_hash: str):
    try:
        result = cache_creator.get_file_details_from_db(file_hash)
        print(result)
        if result:
            # unpack data and return to the user , result from cache db
            file_hash, classification, probability, permissions = result
            item_to_return = {"file_hash":file_hash, "verdict": classification, "probability": probability,  "permissions": permissions}
            return item_to_return
        else:
            return {'details': 'File hash not found'}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")