import pandas as pd
import requests
from typing import Optional
import os
import json
from fastapi import FastAPI, File, UploadFile, HTTPException
from errors import ApkAnalyzerError
from apk_analyzer import ApkAnalyzer
from classifier import Classifier
import psycopg2
from typing import List
from errors import CacheException, OtherProvidersException
from cache import FilesCacheManager, OtherProviders
from models import ClassificationResponse, Metadata, OtherProvidersClassifications
from dotenv import load_dotenv
import logging
import time

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
load_dotenv()

app = FastAPI()

USER_FILE_PATH = os.getenv('USER_FILE_PATH')
COMMON_PERMISSIONS_PATH = os.getenv('COMMON_PERMISSIONS_PATH_FROM_SRC')
CSV_PATH = os.getenv('CSV_PATH_FROM_SRC')
VT_API_KEY = os.getenv('VT_API_KEY')
VT_URL = os.getenv("VT_URL")
most_common_permissions = pd.read_csv(COMMON_PERMISSIONS_PATH, header=None)
permissions_list = most_common_permissions[0].tolist()[1:]
db_params = {
            'host': os.getenv('HOST'), 
            'database': 'Learning',  
            'user': os.getenv('USER_NAME'), 
            'password': os.getenv('PASSWORD'), 
            }


# initial class objects:
apk_analyzer = ApkAnalyzer(permissions_list)

cache_creator = FilesCacheManager(db_params)


def tracer(func):
    def wrapper(*args):
        logging.debug(f"{func.__name__} function")
        before = time.time()
        result  = func(*args)
        logging.debug(f"====================> Execution time: {time.time() - before} seconds")
        return result
    return wrapper



@tracer
def get_file_details(file_path):
    file_hash = apk_analyzer.get_file_hash(file_path)
    cache_result = cache_creator.get_file_details_from_db(file_hash)   
    if cache_result:
        # unpack data and return to the user , result from cache db
        file_hash, classification, probability, permissions = cache_result   
    else:
        file_feature_vector = apk_analyzer.get_feature_vector(file_path)
        file_classifier = Classifier(CSV_PATH, file_feature_vector)
        classification, probability = file_classifier.predict_file(file_feature_vector)
        permissions = apk_analyzer.get_file_permissions(file_path)
        permissions = str(permissions).replace('\'', '')
        # Item doesn't exist, insert it into the table
        cache_creator.insert_results_to_db(file_hash, classification, probability, permissions)
    return file_hash, classification, probability, permissions



@app.post("/scan_file")
async def upload_user_file(file: UploadFile = File(...), metadata: Optional[bool]=False):
    try:
        contents = await file.read()
        with open(USER_FILE_PATH, "wb") as f:
            f.write(contents) 
        
        file_hash, classification, probability, permissions = get_file_details(USER_FILE_PATH)
        
        # return response
        file_metadata = Metadata(file_hash = file_hash, permissions = permissions)
        if metadata == True:     
            response = ClassificationResponse(verdict = classification, probability = probability, metadata = file_metadata)
        else:
            response = ClassificationResponse(verdict = classification, probability = probability)
        return response.model_dump(exclude_none=True) # drop none values from response

    except CacheException as e:
        raise HTTPException(status_code=404, detail=str(e))    
    except OSError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except ApkAnalyzerError as e: 
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")


@app.post("/get_permissions")
async def get_file_permissions(file: UploadFile = File(...)):
    try:
        contents = await file.read()
        with open(USER_FILE_PATH, "wb") as f:
            f.write(contents) 
        permissions = apk_analyzer.get_file_permissions(USER_FILE_PATH)
        return {'File Permissions': permissions}
    except ApkAnalyzerError as e: 
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")



@app.post("/scan_file_with_hash")
async def get_user_file(file_hash: str):
    try:
        result = cache_creator.get_file_details_from_db(file_hash)
        if result:
            # unpack data and return to the user , result from cache db
            file_hash, classification, probability, permissions = result
            file_metadata = Metadata(file_hash = file_hash, permissions = permissions)
            cache_model = ClassificationResponse(verdict = classification, probability = probability, metadata = file_metadata)
            return cache_model
        else:
            return {'details': 'File hash not found'}
    except CacheException as e:
        raise HTTPException(status_code=404, detail=str(e))     
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")
    


@app.post("/scan_with_other_providers")
async def scan_file_with_other_providers(file: UploadFile = File(...)):
    try:
        contents = await file.read()
        with open(USER_FILE_PATH, "wb") as f:
            f.write(contents) 
        
        file_hash, classification, probability, permissions = get_file_details(USER_FILE_PATH)

        vt_params = {'apikey': VT_API_KEY, 'resource': file_hash}
        vt_result = OtherProviders.scan_with_virustotal(VT_URL, vt_params)
        
        file_metadata = Metadata(file_hash = file_hash, permissions = permissions)
        file_virus_total = OtherProvidersClassifications(VirusTotal = vt_result)
        cache_model = ClassificationResponse(verdict = classification, probability = probability, metadata = file_metadata, other_providers = file_virus_total)
        return cache_model
    
    except CacheException as e:
        raise HTTPException(status_code=404, detail=str(e))  
    except OtherProvidersException as e:
        raise HTTPException(status_code=404, detail=str(e))
    except ApkAnalyzerError as e: 
        raise HTTPException(status_code=401, detail=str(e))      
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")