import pandas as pd
import requests
import os
from fastapi import FastAPI, File, UploadFile, HTTPException
from errors import ApkAnalyzerError
from apk_analyzer import ApkAnalyzer
from classifier import Classifier
import psycopg2
from typing import List


app = FastAPI()
USER_FILE_PATH = 'C:/Projects/Python/Android/AndroidMalwareScanner/user_file'
COMMON_PERMISSIONS_PATH = "../dataframes/most_common_permission.csv"
CSV_PATH = "../dataframes/dataframe.csv"

# initial class objects:
most_common_permissions = pd.read_csv(COMMON_PERMISSIONS_PATH, header=None)
permissions_list = most_common_permissions[0].tolist()
permissions_list = permissions_list[1:]

apk_analyzer = ApkAnalyzer(permissions_list)
file_classifier = Classifier(CSV_PATH)

# Connect to the database

db_params = {
            'host': 'localhost',
            'database': 'Learning',
            'user': 'postgres',
            'password': '123456',
            }



def get_file_details_from_db(file_hash):

    try:
        with psycopg2.connect(**db_params) as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM android_apps_cache_files WHERE file_hash = %s", (file_hash,))
            existing_item = cursor.fetchone()
            cursor.close()

            return existing_item
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")



def insert_results_to_db(file_hash, verdict, probability, permissions : List[str]):
    with psycopg2.connect(**db_params) as conn:
        cursor = conn.cursor()

        permissions_str = str(permissions).replace('\'', '')
        query = f"INSERT INTO android_apps_cache_files (file_hash, verdict, probability, permissions) VALUES ('{file_hash}','{verdict}',{probability},'{permissions_str}');"
        print(query)

        cursor.execute(query)
        conn.commit()
        cursor.close()




@app.post("/upload_file/")
async def upload_user_file(file: UploadFile = File(...)):
    try:
        # Establish a connection to the database
        connection = psycopg2.connect(**db_params)
        # Create a cursor object
        cursor = connection.cursor()

        contents = await file.read()
        with open(USER_FILE_PATH, "wb") as f:
            f.write(contents) 
        
        file_hash = apk_analyzer.get_file_hash(USER_FILE_PATH)

        result = get_file_details_from_db(file_hash)

        if result:
            print(f"Found row in DB. row: {result}")
            # unpack data and return to the user , result from cache db
            file_hash, classification, probability, permissions = result
        
        else:
            file_feature_vector = apk_analyzer.get_feature_vector(USER_FILE_PATH)
            classification, probability = file_classifier.predict_file(file_feature_vector)
            permissions = apk_analyzer.get_file_permissions(USER_FILE_PATH)
          
            # Item doesn't exist, insert it into the table
            insert_results_to_db(file_hash, classification, probability, permissions)

        # return response
        item_to_return = {"file_hash":file_hash, "verdict": classification, "probability": probability,  "permissions": permissions}
        return item_to_return

        
    except OSError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except ApkAnalyzerError as e: 
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail= f"Unknown Error: {e}")

