import psycopg2
from typing import List
from errors import CacheException, OtherProvidersException
import json
import requests
import cloudmersive_virus_api_client
from cloudmersive_virus_api_client.rest import ApiException
   


class FilesCacheManager:
    def __init__(self, db_params:json):
        self.db_params = db_params

    
    def get_file_details_from_db(self, file_hash:str):
        try:
            with psycopg2.connect(**self.db_params) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM android_apps_cache_files WHERE file_hash = %s", (file_hash,))
                existing_item = cursor.fetchone()
                cursor.close()
                return existing_item
        except Exception as e:
            raise CacheException(f"Error occurred while run get_file_details_from_db: {e}")



    def insert_results_to_db(self, file_hash:str, verdict:str, probability:float, permissions:str):
        try:    
            with psycopg2.connect(**self.db_params) as conn:
                cursor = conn.cursor()
                query = f"INSERT INTO android_apps_cache_files (file_hash, verdict, probability, permissions) VALUES ('{file_hash}','{verdict}',{probability},'{permissions}');"
    
                cursor.execute(query)
                conn.commit()
                cursor.close()
        except Exception as e:
            raise CacheException(f"Error occurred while run insert_results_to_db: {e}")


class OtherProviders:
   
    def scan_with_virustotal(url:str, params:json):
        try:
            response = requests.get(url, params=params)
            if response.status_code == 200:
                report = response.json()
                if report['positives'] > 0:
                    return 'Malicious'
                else:
                    return 'Benign'
            else:
                raise requests.RequestException(f"status code: {response.status_code}")
        
        except Exception as e:
            raise OtherProvidersException(f"Error occurred while try to scan the file with Virus Total: {e}")
        
    
    def scan_with_cloudmersive(file_content:bytes, api_key:str):
        configuration = cloudmersive_virus_api_client.Configuration()
        configuration.api_key['Apikey'] = api_key
        # create an instance of the API class
        api_instance = cloudmersive_virus_api_client.ScanApi(cloudmersive_virus_api_client.ApiClient(configuration))

        try:
            # Scan a file for viruses
            api_response = api_instance.scan_file(file_content)
            print(api_response.content)
            
            if len(api_response.json()['FoundViruses']) == 0:
                return 'Benign'
            else: 
                return 'Malicious'
        except ApiException as e:
            raise OtherProvidersException(f"Exception when scan_file with cloudmersive: {e}")
        
        """def add_cloudmersive_scan_to_model(model:ClassificationResponse, file_content: bytes):
        file_verdict = OtherProviders.scan_with_cloudmersive(file_content, CLOUDM_API_KEY) 
        model.other_providers = OtherProvidersClassifications(CloudMersive = file_verdict)
        return model"""
    
       

    
    
    


    
   

    