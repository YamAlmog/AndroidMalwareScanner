import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from statistics import mode
from sklearn.feature_selection import SelectKBest, f_classif
import numpy as np 
from enum import Enum


class Verdict(str, Enum):
    Malicious = 'Malicious'
    Benign = 'Benign'


class Classifier():
    def __init__(self, csv_path:str, file_features_vector):
        self.dataframe = pd.read_csv(csv_path)
        self.file_features_vector = file_features_vector
        self.models = []
        self.transform_test_set = []
        self.fit_models()


    def process_data(self) -> pd:
        # remove the column of files hash name because it is not informative for me
        self.dataframe = self.dataframe.drop('hash', axis=1)

        # split label from data
        y = self.dataframe['label']
        X = self.dataframe.drop('label', axis=1)
        return X, y
    

    def fit_kbest_transform(model, X_train, y_train, X_test):
        # Use SelectKBest with ANOVA F-statistic for feature selection
        k_best = SelectKBest(score_func=f_classif, k=10)
        X_train_selected = k_best.fit_transform(X_train, y_train)
        X_test_selected = k_best.transform(X_test)

        # Fit the classifier on the selected features
        model.fit(X_train_selected, y_train)

        return X_test_selected
    

    def fit_models(self) -> list:
        X, y = self.process_data()
        
        knn_classifier = KNeighborsClassifier(algorithm='kd_tree', n_neighbors=3, weights='distance')
        X_test_knn = Classifier.fit_kbest_transform(knn_classifier, X, y, self.file_features_vector)
        print(X_test_knn)
        rf_classifier = RandomForestClassifier(criterion='gini', max_depth=10, min_samples_split=5, n_estimators=110)
        X_test_rf = Classifier.fit_kbest_transform(rf_classifier, X, y, self.file_features_vector)

        svm_classifier = SVC(C=3, kernel='rbf')
        X_test_svm = Classifier.fit_kbest_transform(svm_classifier, X, y, self.file_features_vector)

        
        self.models = [knn_classifier, rf_classifier, svm_classifier]
        self.transform_test_set = [X_test_knn, X_test_rf, X_test_svm]


    def predict_file(self ) -> Verdict:

        predict_result = []
        for model, features_vector in zip(self.models, self.transform_test_set ):
            result = model.predict([features_vector])
            predict_result.append(result[0])
        
        # calculate the probability use knn model
        rf_model = self.models[1]
        rf_feature_vector = self.transform_test_set[1]
        malicious_prob = rf_model.predict_proba([rf_feature_vector])

        # Determine the majority using the mode function
        majority_prediction = mode(predict_result)
        
        if majority_prediction == 1:
            majority_prediction = Verdict.Malicious
            return majority_prediction, malicious_prob[0][1]
        else:
            majority_prediction = Verdict.Benign
            return majority_prediction, 1-malicious_prob[0][1]