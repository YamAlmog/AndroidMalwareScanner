import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from statistics import mode
from sklearn.metrics import f1_score
import numpy as np 

class Classifier():
    def __init__(self, csv_path:str):
        self.dataframe = pd.read_csv(csv_path)
        self.models = []

        self.fit_models()


    def process_data(self) -> pd:
        # remove the column of files hash name because it is not informative for me
        self.dataframe = self.dataframe.drop('hash', axis=1)

        # split label from data
        y = self.dataframe['label']
        X = self.dataframe.drop('label', axis=1)
        
        return X, y


    def fit_models(self) -> list:
        X, y = self.process_data()
        
        knn_classifier = KNeighborsClassifier(algorithm='auto', n_neighbors=3, weights='distance')
        # fit knn model to train set
        knn_classifier.fit(X, y)
        
        rf_classifier = RandomForestClassifier(criterion='gini', max_depth=10, min_samples_split=2, n_estimators=110)
        # fit rf model to train set    
        rf_classifier.fit(X, y)

        svm_classifier = SVC(C=2, kernel='rbf')
        # fit svm model to train set 
        svm_classifier.fit(X, y)
        
        self.models = [knn_classifier, rf_classifier, svm_classifier]


    def predict_file(self, file_features_vector):

        predict_result = []
        for model in self.models:
            result = model.predict([file_features_vector])
            predict_result.append(result[0])
        
        # calculate the probability use knn model
        rf_model = self.models[1]
        malicious_prob = rf_model.predict_proba([file_features_vector])

        # Determine the majority using the mode function
        majority_prediction = mode(predict_result)
        if majority_prediction == 1:
            majority_prediction = "Malicious"
            return majority_prediction, malicious_prob[0][1]
        else:
            majority_prediction = "Benign"
            return majority_prediction, 1-malicious_prob[0][1]