import pandas as pd

from sklearn.model_selection import  GridSearchCV
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from statistics import mode


class Classifier():
    def __init__(self, csv_path:str) -> None:
        self.csv_file = csv_path

        

    def process_data(self):
        # open csv file
        df_path = self.csv_file
        android_df = pd.read_csv(df_path)
        # remove the column of files hash name because it is not informative for me
        android_df = android_df.drop('Unnamed: 0', axis=1)

        # split label from data
        y = android_df['label']
        X = android_df.drop('label', axis=1)
       
        return X, y


    def fit_models(self):
        train_df, train_label = self.process_data()

        # find the best parameters for knn model
        knn_param_grid = {'n_neighbors': [1, 3, 5, 7, 9], 'weights': ['uniform', 'distance'], 'algorithm':['auto', 'ball_tree', 'kd_tree']}
        knn_classifier = KNeighborsClassifier()
        knn_grid_search = GridSearchCV(knn_classifier, knn_param_grid, cv=5, scoring='accuracy')
        knn_grid_search.fit(train_df, train_label)
        knn_classifier = knn_grid_search.best_estimator_
        # fit knn model to train set
        knn_classifier.fit(train_df, train_label)
        

        # find the best parameters for rf model
        rf_grid_params = {'criterion':['gini', 'entropy'], 'n_estimators': [60, 80, 100, 120], 'max_depth': [2,5,10], 'min_samples_split':[2,5,7]}
        rf_classifier = RandomForestClassifier()
        rf_grid_search = GridSearchCV(rf_classifier, rf_grid_params, cv=5, scoring='accuracy')
        rf_grid_search.fit(train_df, train_label)
        rf_classifier = rf_grid_search.best_estimator_
        # fit rf model to train set    
        rf_classifier.fit(train_df, train_label)
        

        # find the best parameters for svm model
        svm_grid_params = {'C': [1,2,3], 'kernel': ['rbf', 'linear', 'poly']}
        svm_classifier = SVC()
        svm_grid_search = GridSearchCV(svm_classifier, svm_grid_params, cv=5, scoring='accuracy')
        svm_grid_search.fit(train_df, train_label)
        svm_classifier = svm_grid_search.best_estimator_
        # fit svm model to train set 
        svm_classifier.fit(train_df, train_label)

        models_list = [knn_classifier, rf_classifier, svm_classifier]
        return models_list


    def predict_file(self, file_features_vector):
        models = self.fit_models()

        predict_result = []
        for model in models:
            result = model.predict(file_features_vector)
            predict_result.append(result)

        # Determine the majority using the mode function
        majority_prediction = mode(predict_result)
        return(majority_prediction)