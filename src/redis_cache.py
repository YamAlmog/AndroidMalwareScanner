import redis
import json
from models import ClassificationResponse
from errors import CacheException



class RedisCacheManager:
    def __init__(self, host:str, port:int):
        self.redis_client = redis.Redis(host=host, port=port)

  
    def get_redis_db_file_details(self, key:str) -> ClassificationResponse:
        try:
            if (self.redis_client.exists(key)):
                json_data = self.redis_client.get(key)
            
                file_dict = json.loads(json_data)
                # Create a Pydantic model instance from the file dictionary
                file_details = ClassificationResponse(**file_dict)
                file_details.in_cache = True
                return file_details
            else:
                return None
        except Exception as e:
             raise CacheException(f"Error occurred while try get file details from redis cache: {e}")
        

    def insert_file_details_to_redis_db(self, key:str, model:ClassificationResponse):
        try:
            data_dict = model.model_dump()
            # Serialize the model to JSON
            json_data = json.dumps(data_dict)
            
            # Save JSON data to Redis with the file hash as the key
            self.redis_client.set(key, json_data)
        except Exception as e:
            raise CacheException(f"Error occurred while try insert file details to redis cache: {e}")
