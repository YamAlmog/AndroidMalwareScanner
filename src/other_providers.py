from errors import ExternalProviderError
import json
import requests
from models import ClassificationResponse, OtherProvidersClassifications
import asyncio
from pydantic import BaseModel

class OtherProviders:
   
    async def scan_with_virustotal(url:str, params:json) -> str:
        try:
            response = requests.get(url, params=params)
            if response.status_code == 200:
                report = response.json()
                if report['positives'] > 0:
                    return 'Malicious'
                else:
                    return 'Benign'
            else:
                raise requests.RequestException(f"status code: {response.status_code}")
        
        except Exception as e:
            raise ExternalProviderError(f"Error occurred while try to scan the file with Virus Total: {e}")
        
    
    async def scan_with_malwarebazaar(file_hash: str) -> str:
        try:
            url = "https://mb-api.abuse.ch/api/v1/"
            query = {
                "query": "get_info",
                "hash": file_hash
            }
            response = requests.post(url, data=query)
            if response.status_code == 200:
                result = response.json()
                if result['query_status'] == 'hash_not_found':
                    return 'Benign'
                else:
                    return 'Malicious'
            else:
                raise Exception("Error: ", response.status_code)
        
        except Exception as e:
            raise ExternalProviderError(f"Error occurred while try to scan the file with MalwareBazaar: {e}")
        


    async def scan_with_kaspersky(file_hash: str, api_key: str) -> str:
        try:
            url = f'https://opentip.kaspersky.com/api/v1/search/hash?request={file_hash}'
            headers = {'x-api-key': api_key}
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                json_response = response.json()
                if json_response['Zone'] in ('Red', 'Yellow'):
                    return 'Malicious'
                else:
                    return 'Benign'
            elif response.status_code == 404:
                return None   
            else:
                raise Exception(f'Status code = {response.status_code}')
        
        except Exception as e:
            raise ExternalProviderError(f"Error occurred while try to scan the file with Kaspersky API: {e}")
        

    async def add_other_providers_to_model(model:ClassificationResponse, vt_api_key:str, vt_url:str, kaspersky_key:str) -> BaseModel:
        file_metadata = model.metadata
        file_hash = file_metadata.file_hash
        virustotal_params = {'apikey': vt_api_key, 'resource': file_hash}
        virustotal_result, malwarebazaar_result, kaspersky_result = await asyncio.gather(OtherProviders.scan_with_virustotal(vt_url, virustotal_params), OtherProviders.scan_with_malwarebazaar(file_hash), OtherProviders.scan_with_kaspersky(file_hash, kaspersky_key))
        model.other_providers = OtherProvidersClassifications(VirusTotal = virustotal_result, MalwareBazaar = malwarebazaar_result, Kaspersky = kaspersky_result)
        return model
    