from fastapi.testclient import TestClient
from api_main import app
import redis 
import pandas as pd
import os
from apk_analyzer import ApkAnalyzer
from utils import get_file_hash
from dotenv import load_dotenv

if os.getenv("DOCKER_ENV"):
    load_dotenv(".docker.env")
else:
    load_dotenv(".env")


# constant params
BENIGN = "Benign"
MALICIOUS = "Malicious"

benign_file_path = "tests/files/609.apk"
malicious_file_path = "tests/files/3c98261918fe4fa27bb80a5a99016bb13ddb7bf533b4d4b01c70d8df0356b16f.apk"
non_apk_file_path = "tests/files/feat_dist.png"
invalid_file_hash = "--41f30dfc8517509b8373a8ea9b6608e4a00558520b08154c7f8f376382218fd9--"

COMMON_PERMISSIONS_PATH = os.getenv('COMMON_PERMISSIONS_PATH_FROM_SRC')
# initial ApkAnalyzer class objects:
most_common_permissions = pd.read_csv(COMMON_PERMISSIONS_PATH, header=None)
permissions_list = most_common_permissions[0].tolist()[1:]
apk_analyzer = ApkAnalyzer(permissions_list)


client = TestClient(app)

# set-up redis cache function
def empty_redis_cache(db_num=0) -> None:
    response = client.get("/clear_cache")
    assert response.json() == "Redis cache successfully emptied."

# test get_file_details function with new file input while metadata=False, and then test it again to check whether it was in redis cache  
def test_get_file_details() -> None:
    empty_redis_cache()
    with open(benign_file_path, 'rb') as file:
        response = client.post("/scan_file", files={"file": (file.name, file, "application/octet-stream")})
        assert response.status_code == 200
        assert response.json()["verdict"] == BENIGN
        assert response.json()["in_cache"] == False 

        cache_response = client.post("/scan_file", files={"file": (file.name, file, "application/octet-stream")})
        assert cache_response.status_code == 200
        assert cache_response.json()["in_cache"] == True



# test get_file_details function with metadata=True
def test_get_file_details_with_metadata() -> None:
    with open(benign_file_path, 'rb') as file:
        content = file.read()
        file_hash = get_file_hash(content)
        file_permissions = apk_analyzer.get_file_permissions(content)
        permissions = str(file_permissions).replace('\'', '')
        response = client.post("/scan_file", files={"file": (file.name, file, "application/octet-stream")}, params={'metadata':True})
        assert response.status_code == 200
        assert response.json()["verdict"] == BENIGN
        actual_metadata = response.json()["metadata"]
        assert actual_metadata["file_hash"] == file_hash
        assert set(actual_metadata["permissions"]) == set(permissions)

                                    


# test get_file_details function with file that doesn't exist/ illegal input see what response am i receiving 
def test_get_non_apk_file() -> None:
    with open(non_apk_file_path, 'rb') as file:
        # test upload_user_file with non-apk 
        response = client.post("/scan_file", files={"file": (file.name, file, "application/octet-stream")}, params={'metadata':True})
        assert response.status_code == 400
        assert response.json()["detail"] == f"Inserting a non-apk file: {file.name}"
    
        # test get_file_permissions with non-apk 
        response = client.post("/get_permissions", files={"file": (file.name, file, "application/octet-stream")}, params={'metadata':True})
        assert response.status_code == 400
        assert response.json()["detail"] == f"Inserting a non-apk file: {file.name}"




# test get_file_permissions function with valid input of file
def test_get_file_permissions() -> None:
    with open(malicious_file_path, 'rb') as file:
        content = file.read()
        file_permissions = apk_analyzer.get_file_permissions(content)

        response = client.post("/get_permissions", files={"file": (file.name, file, "application/octet-stream")})
        assert response.status_code == 200
        assert set(response.json()["File Permissions"]) ==  set(file_permissions)
        
    

# test get_user_file function with valid file_hash,  file must be in cache. And then with invalid hash
def test_get_file_with_hash() -> None:    
    with open(benign_file_path, 'rb') as file:
        content = file.read()
        file_hash = get_file_hash(content)
    response = client.get("/scan_file_with_hash", params={"file_hash": file_hash})
    assert response.status_code == 200
    assert response.json()["verdict"] == BENIGN
    
    error_response = client.get("/scan_file_with_hash", params={"file_hash": invalid_file_hash})
    assert error_response.status_code == 404
    assert error_response.json()['detail'] == 'File hash not found'



# test scan_file_with_other_providers function with malicious file
def test_scan_with_other_providers() -> None:
    with open(malicious_file_path, 'rb') as file:
        content = file.read()
        file_hash = get_file_hash(content)
        file_permissions = apk_analyzer.get_file_permissions(content)
        permissions = str(file_permissions).replace('\'', '')
        response = client.post("/scan_with_other_providers", files={"file": (file.name, file, "application/octet-stream")})
        assert response.status_code == 200
        assert response.json()["verdict"] == MALICIOUS
        actual_metadata = response.json()["metadata"]
        assert actual_metadata["file_hash"] == file_hash
        assert set(actual_metadata["permissions"]) ==  set(permissions)
        other_providers = response.json()["other_providers"]
        assert other_providers["VirusTotal"] == MALICIOUS
        assert other_providers["MalwareBazaar"] == BENIGN
        assert other_providers["Kaspersky"] == MALICIOUS
        assert response.json()["in_cache"] == False                                



# test upload_multiple_files function with malicious file
files_list = [benign_file_path, malicious_file_path]  
files = [("files", (os.path.basename(file), open(file, "rb"), "application/octet-stream")) for file in files_list] 

with open(files_list[0], 'rb') as first_file:
    first_file_content = first_file.read()
    first_file_hash = get_file_hash(first_file_content)
    first_file_permissions = apk_analyzer.get_file_permissions(first_file_content)
    first_permissions = str(first_file_permissions).replace('\'', '')

with open(files_list[1], 'rb') as second_file:
    second_file_content = second_file.read()
    second_file_hash = get_file_hash(second_file_content)
    second_file_permissions = apk_analyzer.get_file_permissions(second_file_content)
    second_permissions = str(second_file_permissions).replace('\'', '')


def test_upload_multiple_files() -> None:
    response = client.post("/scan_file_batch", files=files)
    assert response.status_code == 200
    assert response.json()[0]["verdict"] == BENIGN
    first_file_metadata = response.json()[0]["metadata"]
    assert first_file_metadata["file_hash"] == first_file_hash
    assert set(first_file_metadata["permissions"]) == set(first_permissions)
    assert response.json()[0]["in_cache"] == True

    assert response.json()[1]["verdict"] == MALICIOUS
    second_file_metadata = response.json()[1]["metadata"]
    assert second_file_metadata["file_hash"] == second_file_hash
    assert set(second_file_metadata["permissions"]) == set(second_permissions)             
    assert response.json()[1]["in_cache"] == True



invalid_files_list = [non_apk_file_path, benign_file_path, malicious_file_path,]  
invalid_files = [("files", (os.path.basename(file), open(file, "rb"), "application/octet-stream")) for file in invalid_files_list] 

def test_upload_multiple_files_with_non_apk() -> None:
    response = client.post("/scan_file_batch", files=invalid_files)

    print(response.status_code)
    print(response.json()["detail"])
    assert response.status_code == 400
    assert response.json()["detail"] == f"Inserting a non-apk file: {invalid_files[0][1][0]}"